[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "viz.html",
    "href": "viz.html",
    "title": "Visualization",
    "section": "",
    "text": "Iris data\nHere’s a plot of the iris data.\n\n\n\n\n\n&lt;matplotlib.collections.PathCollection at 0x131547990&gt;\n(a) The iris data\n\n\n\n\n\n\n(b) ?(caption)\n\n\n\nFigure 1: ?(caption)\n\n\nSource: plotly_example.ipynb\nIf you want to see the code that generated this plot, click on the notebook link."
  },
  {
    "objectID": "plotly_example.html",
    "href": "plotly_example.html",
    "title": "Iris plot",
    "section": "",
    "text": "import plotly.express as px\nimport matplotlib.pyplot as plt\ndf = px.data.iris()\nplt.scatter(df['sepal_width'], df['sepal_length'])\n\n\n&lt;matplotlib.collections.PathCollection at 0x131547990&gt;\n(a) The iris data\n\n\n\n\n\n\n(b)\n\n\n\nFigure 1: ?(caption)"
  },
  {
    "objectID": "DRY.html",
    "href": "DRY.html",
    "title": "DRY Examples",
    "section": "",
    "text": "SQL\nIf we’re using a common table expression, we might first test the query that creates it:\n\ncte_query = '''\nSELECT\n    branch,\n    date,\n    MAX(unit_price) AS highest_price\n  FROM sales\n  GROUP BY branch, date\n'''\ncte_result = pd.read_sql(cte_querycte, con)\n\nAnd if we’re happy with the result, we make the query that uses it:\nquery = '''\nWITH highest AS (\n  SELECT\n    branch,\n    date,\n    MAX(unit_price) AS highest_price\n  FROM sales\n  GROUP BY branch, date\n)\nSELECT\n  sales.*,\n  h.highest_price\nFROM sales\nJOIN highest h\n  ON sales.branch = h.branch\n    AND sales.date = h.date\n'''\npd.read_sql(query, con)\nBut if we want to keep both cte_query and query, we can avoid repetition by referring back to cte_query:\nquery = f'''\nWITH highest AS (\n  {cte_query}\n)\nSELECT\n  sales.*,\n  h.highest_price\nFROM sales\nJOIN highest h\n  ON sales.branch = h.branch\n    AND sales.date = h.date\n'''\npd.read_sql(query, con)"
  },
  {
    "objectID": "Decorator.html",
    "href": "Decorator.html",
    "title": "Decorator",
    "section": "",
    "text": "The Decorator pattern lets you extend the functionality of a class without modifying the class’ code and without subclassing."
  },
  {
    "objectID": "Decorator.html#our-first-design",
    "href": "Decorator.html#our-first-design",
    "title": "Decorator",
    "section": "Our first design",
    "text": "Our first design\nSay we’re building an ordering system for a coffee shop, and we want to design classes to represent the drinks ordered. The system will create an object for each drink, and will need to have each object return its description and price.\nOur first design uses a Beverage class that knows about the condiments that can be included in a drink (e.g. milk, mocha). Subclasses of Beverage represent the different types of coffee (e.g. House Blend, Decaf) have the drink-specific descriptions and prices.\n\nclass Beverage:\n    milkCost = 0.10\n    soyCost = 0.15\n    mochaCost = 0.20\n    \n    def __init__(self, hasMilk=False, hasSoy=False, hasMocha=False):\n        self.hasMilk = hasMilk\n        self.hasSoy = hasSoy\n        self.hasMocha = hasMocha\n        \n    def __str__(self):\n        return \"Unknown Beverage\"\n    \n    def get_condiment_cost(self):\n        condimentCost = 0.0\n        if self.hasMilk:\n            condimentCost += self.milkCost\n        if self.hasSoy:\n            condimentCost += self.soyCost\n        if self.hasMocha:\n            condimentCost += self.mochaCost\n        return condimentCost\n    \n    def get_condiment_desc(self):\n        condimentDesc = \"\"\n        if self.hasMilk:\n            condimentDesc += \", add Milk\"\n        if self.hasSoy:\n            condimentDesc += \", add Soy\"\n        if self.hasMocha:\n            condimentDesc += \", add Mocha\"\n        return condimentDesc\n    \n###########################\nclass HouseBlend(Beverage):\n    def __str__(self):\n        return \"House Blend\" + super().get_condiment_desc()\n    \n    def get_cost(self):\n        return 0.89 + super().get_condiment_cost() \n    \nclass DarkRoast(Beverage):\n    def __str__(self):\n        return \"Dark Roast\" + super().get_condiment_desc()\n    \n    def get_cost(self):\n        return 0.99 + super().get_condiment_cost()\n    \nclass Decaf(Beverage):    \n    def __str__(self):\n        return \"Decaf\" + super().get_condiment_desc()\n    \n    def get_cost(self):\n        return 1.05 + super().get_condiment_cost()\n\nLet’s see how to use these classes.\nA list of drink objects represents the order, and we can have the objects print out their descriptions and prices.\n\norder = [Decaf(hasMilk=True, hasMocha=True),\n         DarkRoast(hasSoy=True)]\n\nfor bev in order:\n    print(f'{bev}: ${bev.get_cost()}')\n\nDecaf, add Milk, add Mocha: $1.35\nDark Roast, add Soy: $1.14\n\n\n\nThe burden of this design\nNow suppose our coffee shop adds a new condiment to the menu: Whip. Because knowledge of the condiments was designed into the Beverage class, that’s where we need to make changes to add this menu item.\n\nclass Beverage:\n    milkCost = 0.10\n    soyCost = 0.15\n    mochaCost = 0.20\n    whipCost = 0.10                         # &lt;--- add a class variable\n    \n    def __init__(self, hasMilk=False, hasSoy=False, hasMocha=False, \n                 hasWhip=False):            # &lt;--- change the interface\n        self.hasMilk = hasMilk              \n        self.hasSoy = hasSoy\n        self.hasMocha = hasMocha\n        self.hasWhip = hasWhip              # &lt;--- add an instance variable\n        \n    def __str__(self):\n        return \"Unknown Beverage\"\n    \n    def get_condiment_cost(self):\n        condimentCost = 0.0\n        if self.hasMilk:\n            condimentCost += self.milkCost\n        if self.hasSoy:\n            condimentCost += self.soyCost\n        if self.hasMocha:\n            condimentCost += self.mochaCost\n        if self.hasWhip:                    # &lt;--- add new logic\n            condimentCost += self.whipCost\n        return condimentCost\n    \n    def get_condiment_desc(self):\n        condimentDesc = \"\"\n        if self.hasMilk:\n            condimentDesc += \", add Milk\"\n        if self.hasSoy:\n            condimentDesc += \", add Soy\"\n        if self.hasMocha:\n            condimentDesc += \", add Mocha\"\n        if self.hasWhip:                    # &lt;--- add new logic\n            condimentDesc += \", add Whip\"\n        return condimentDesc\n\nNow we can add Whip to our drinks.\n\norder = [Decaf(hasMilk=True, hasMocha=True),\n         DarkRoast(hasWhip=True)]\n\nfor bev in order:\n    print(f'{bev}: ${bev.get_cost()}')\n\nDecaf, add Milk, add Mocha: $1.35\nDark Roast, add Whip: $1.09\n\n\nNotice the big disadvantage of this design. To add the new condiment, we were forced to make changes to almost every part of the Beverage class. But Beverage was already working well; we would really prefer to leave it alone rather than open it up and risk breaking something."
  },
  {
    "objectID": "Decorator.html#an-easy-to-change-design-using-decorator",
    "href": "Decorator.html#an-easy-to-change-design-using-decorator",
    "title": "Decorator",
    "section": "An easy-to-change design using Decorator",
    "text": "An easy-to-change design using Decorator\nLet’s see how the Decorator pattern makes our design easier to change.\n\n# Beverage and its subclasses know nothing about condiments:\n\nclass Beverage:       \n    def __str__(self):\n        return \"Unknown Beverage\"\n\n\nclass HouseBlend(Beverage):\n    def get_cost(self):\n        return 0.89\n    \n    def __str__(self):\n        return \"House Blend\"\n        \nclass DarkRoast(Beverage):\n    def get_cost(self):\n        return 0.99\n    \n    def __str__(self):\n        return \"Dark Roast\"\n    \nclass Decaf(Beverage):\n    def get_cost(self):\n        return 1.05\n    \n    def __str__(self):\n        return \"Decaf\"\n    \n############################\n# Here are the decorators\n\nclass CondimentDecorator(Beverage):\n    def __init__(self, beverage):\n        super().__init__()\n        self.beverage = beverage\n        \nclass Milk(CondimentDecorator):\n    def __str__(self):\n        return self.beverage.__str__() + \", add Milk\"\n    \n    def get_cost(self):\n        return self.beverage.get_cost() + 0.10\n\nclass Soy(CondimentDecorator):\n    def __str__(self):\n        return self.beverage.__str__() + \", add Soy\"\n    \n    def get_cost(self):\n        return self.beverage.get_cost() + 0.15\n    \nclass Mocha(CondimentDecorator):\n    def __str__(self):\n        return self.beverage.__str__() + \", add Mocha\"\n    \n    def get_cost(self):\n        return self.beverage.get_cost() + 0.20\n\nThe usage of these classes now looks different. Instead of specifying the condiments in the call to the constructor, we wrap the constructor with the decorators:\n\norder = [Milk(Mocha(Decaf())),\n         Soy(DarkRoast())]\n\nfor bev in order:\n    print(f'{bev}: ${bev.get_cost()}')\n\nDecaf, add Mocha, add Milk: $1.35\nDark Roast, add Soy: $1.14\n\n\n\nThe payoff\nWhen we enhance our system with the new Whip condiment, we don’t need to modify any existing class. We only have to define a new subclass of the decorator.\n\nclass Whip(CondimentDecorator):\n    def __str__(self):\n        return self.beverage.__str__() + \", add Whip\"\n    \n    def get_cost(self):\n        return self.beverage.get_cost() + 0.10\n\nAnd with that one addition, we can add Whip to the menu:\n\norder = [Milk(Mocha(Decaf())),\n         Whip(DarkRoast())]\n\nfor bev in order:\n    print(f'{bev}: ${bev.get_cost()}')\n\nDecaf, add Mocha, add Milk: $1.35\nDark Roast, add Whip: $1.09"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pywebsite",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\nimport os\n \n# Using system() method to\n# execute shell commands\nos.system('python -V')\n\nPython 3.11.3\n\n\n0"
  }
]